import os
import torch
import numpy as np
from scipy.io import wavfile
from speechkit import configure_credentials, model_repository
from speechkit.common.utils import creds

from config import YA_IAM_TOKEN

# ================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ================================

TTS_OUTPUT_FILE = "output.wav"
FALLBACK_AUDIO = "not_understood.wav"  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Silero
SILERO_LANGUAGE = 'ru'
SILERO_MODEL_ID = 'v3_1_ru'
SILERO_SPEAKER = 'baya'  # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'eugene', 'kseniya' –∏ –¥—Ä.
MAX_TEXT_LENGTH = 510

# ================================
# 1. –ó–∞–≥—Ä—É–∑–∫–∞ Silero –º–æ–¥–µ–ª–∏
# ================================

_silero_model = None

def load_silero_tts():
    global _silero_model
    print("üß† –ó–∞–≥—Ä—É–∂–∞—é Silero TTS...")
    try:
        _silero_model, _ = torch.hub.load(
            repo_or_dir='snakers4/silero-models',
            model='silero_tts',
            language=SILERO_LANGUAGE,
            speaker=SILERO_MODEL_ID
        )
        print("üü¢ Silero –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return _silero_model
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero: {e}")
        return None


# ================================
# 2. Yandex TTS
# ================================

def tts_yandex(text, output_path=TTS_OUTPUT_FILE):
    print("üîä –û–∑–≤—É—á–∏–≤–∞—é —á–µ—Ä–µ–∑ Yandex...")

    if not text.strip():
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        return None

    try:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if len(text) > MAX_TEXT_LENGTH:
            text = text[:MAX_TEXT_LENGTH] + "..."

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Yandex
        configure_credentials(
            yandex_credentials=creds.YandexCredentials(api_key=YA_IAM_TOKEN)
        )

        model = model_repository.synthesis_model()
        model.voice = 'anton'
        model.role = 'good'
        model.unsafe_mode = True
        model.speed = 1.25

        result = model.synthesize(text, raw_format=False)
        result.export(output_path, 'wav')
        print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {output_path}")
        return output_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Yandex TTS: {e}")
        return None


# ================================
# 3. Silero Fallback
# ================================

def tts_silero(text, output_path=TTS_OUTPUT_FILE, speaker=SILERO_SPEAKER):
    print("üîä –û–∑–≤—É—á–∏–≤–∞—é —á–µ—Ä–µ–∑ Silero (fallback)...")

    global _silero_model
    if _silero_model is None:
        print("‚ö†Ô∏è Silero –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return None

    if not text.strip():
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        return None

    try:
        if len(text) > MAX_TEXT_LENGTH:
            text = text[:MAX_TEXT_LENGTH] + "..."

        audio = _silero_model.apply_tts(
            text=text + '.',
            sample_rate=48000,
            speaker=speaker,
            put_accent=True,
            put_yo=True
        )

        wavfile.write(output_path, 48000, (audio.numpy().flatten() * 32767).astype(np.int16))
        print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {output_path}")
        return output_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Silero: {e}")
        return None


# ================================
# 4. Unified TTS API
# ================================

def tts(text, output_path=TTS_OUTPUT_FILE, speaker=SILERO_SPEAKER):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ TTS: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç Yandex, –ø–æ—Ç–æ–º –ø–∞–¥–∞–µ—Ç –Ω–∞ Silero
    :param text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
    :param output_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    :param speaker: –≥–æ–ª–æ—Å –¥–ª—è Silero
    :return: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ None
    """

    # –ü–æ–ø—Ä–æ–±—É–µ–º Yandex
    result = tts_yandex(text, output_path)

    if result and os.path.exists(result):
        return result

    # –ï—Å–ª–∏ Yandex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º Silero
    print("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Silero (fallback)")
    result = tts_silero(text, output_path, speaker)

    if result and os.path.exists(result):
        return result

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º fallback
    if os.path.exists(FALLBACK_AUDIO):
        print("üîá –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return FALLBACK_AUDIO

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤.")
    return None