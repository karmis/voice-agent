# import torch
# from bark import generate_audio
# from scipy.io.wavfile import write as write_wav
# import numpy as np
# import os
# os.environ["SUNO_USE_SMALL_MODELS"] = "True"
#
# from bark import preload_models
#
# TTS_OUTPUT_FILE = "output.wav"
#
# def load_bark_tts():
#     print("üß† Bark –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
#     preload_models()
#     print("üß† Bark –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
#     return True  # Bark –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ
#
#
# def tts(text, model=None, speaker="v2/ru_speaker_1", output_path=TTS_OUTPUT_FILE):
#     print("üîä –û–∑–≤—É—á–∏–≤–∞—é —á–µ—Ä–µ–∑ Bark...")
#     if not text.strip():
#         print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
#         return None
#
#     try:
#         # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏)
#         max_length = 250
#         if len(text) > max_length:
#             text = text[:max_length] + "..."
#             print(f"‚úÇÔ∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ {max_length} —Å–∏–º–≤–æ–ª–æ–≤.")
#
#         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
#         audio_array = generate_audio(text, history_prompt=speaker)
#         audio_array = (audio_array * 32767).astype(np.int16)
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV
#         write_wav(output_path, rate=24000, data=audio_array)
#         print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {output_path}")
#         return output_path
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
#         return None